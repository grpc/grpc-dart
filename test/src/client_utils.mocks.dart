// Mocks generated by Mockito 5.0.0-nullsafety.6 from annotations
// in grpc/test/src/client_utils.dart.
// Do not manually edit this file.

import 'dart:async' as i3;

import 'package:http2/src/hpack/hpack.dart' as i4;
import 'package:http2/transport.dart' as i2;
import 'package:mockito/mockito.dart' as i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakeClientTransportStream extends i1.Fake
    implements i2.ClientTransportStream {}

class _FakeStreamSink<S> extends i1.Fake implements i3.StreamSink<S> {}

/// A class which mocks [ClientTransportConnection].
///
/// See the documentation for Mockito's code generation for more information.
class MockClientTransportConnection extends i1.Mock
    implements i2.ClientTransportConnection {
  MockClientTransportConnection() {
    i1.throwOnMissingStub(this);
  }

  @override
  bool get isOpen =>
      (super.noSuchMethod(Invocation.getter(#isOpen), returnValue: false)
          as bool);
  @override
  set onActiveStateChanged(i2.ActiveStateHandler? callback) =>
      super.noSuchMethod(Invocation.setter(#onActiveStateChanged, callback),
          returnValueForMissingStub: null);
  @override
  i3.Future<void> get onInitialPeerSettingsReceived =>
      (super.noSuchMethod(Invocation.getter(#onInitialPeerSettingsReceived),
          returnValue: Future.value(null)) as i3.Future<void>);
  @override
  i2.ClientTransportStream makeRequest(List<i4.Header>? headers,
          {bool? endStream = false}) =>
      (super.noSuchMethod(
          Invocation.method(#makeRequest, [headers], {#endStream: endStream}),
          returnValue:
              _FakeClientTransportStream()) as i2.ClientTransportStream);
  @override
  i3.Future<dynamic> ping() => (super.noSuchMethod(Invocation.method(#ping, []),
      returnValue: Future.value(null)) as i3.Future<dynamic>);
  @override
  i3.Future<dynamic> finish() =>
      (super.noSuchMethod(Invocation.method(#finish, []),
          returnValue: Future.value(null)) as i3.Future<dynamic>);
  @override
  i3.Future<dynamic> terminate() =>
      (super.noSuchMethod(Invocation.method(#terminate, []),
          returnValue: Future.value(null)) as i3.Future<dynamic>);
}

/// A class which mocks [ClientTransportStream].
///
/// See the documentation for Mockito's code generation for more information.
class MockClientTransportStream extends i1.Mock
    implements i2.ClientTransportStream {
  MockClientTransportStream() {
    i1.throwOnMissingStub(this);
  }

  @override
  i3.Stream<i2.TransportStreamPush> get peerPushes =>
      (super.noSuchMethod(Invocation.getter(#peerPushes),
              returnValue: Stream<i2.TransportStreamPush>.empty())
          as i3.Stream<i2.TransportStreamPush>);
  @override
  int get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: 0) as int);
  @override
  i3.Stream<i2.StreamMessage> get incomingMessages =>
      (super.noSuchMethod(Invocation.getter(#incomingMessages),
              returnValue: Stream<i2.StreamMessage>.empty())
          as i3.Stream<i2.StreamMessage>);
  @override
  i3.StreamSink<i2.StreamMessage> get outgoingMessages =>
      (super.noSuchMethod(Invocation.getter(#outgoingMessages),
              returnValue: _FakeStreamSink<i2.StreamMessage>())
          as i3.StreamSink<i2.StreamMessage>);
  @override
  set onTerminated(void Function(int?)? value) =>
      super.noSuchMethod(Invocation.setter(#onTerminated, value),
          returnValueForMissingStub: null);
  @override
  void sendHeaders(List<i4.Header>? headers, {bool? endStream = false}) =>
      super.noSuchMethod(
          Invocation.method(#sendHeaders, [headers], {#endStream: endStream}),
          returnValueForMissingStub: null);
  @override
  void sendData(List<int>? bytes, {bool? endStream = false}) =>
      super.noSuchMethod(
          Invocation.method(#sendData, [bytes], {#endStream: endStream}),
          returnValueForMissingStub: null);
}
